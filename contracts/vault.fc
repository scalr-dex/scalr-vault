#pragma version >=0.4.4;

#include "imports/stdlib.fc";
#include "vault/messages.fc";
#include "vault/utils.fc";
#include "vault/storage.fc";
#include "vault/admin-calls.fc";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_storage();

    slice sender_address = cs~load_msg_addr();    
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins();

    force_chain(WORKCHAIN, sender_address);

    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if (op == op::transfer_notification) {
        return (); ;; Confirm receive jettons
    }

    ;; handle withdrawal request by user and send excess to keeper for withdrawal operation
    if (op == op::request_withdrawal) {
        (int jetton_amount, slice user_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        throw_unless(error:sender_not_user, equal_slices(sender_address, user_address));
        throw_unless(error:zero_withdrawal, jetton_amount > 0);
        throw_unless(error::insufficient_gas, msg_value > 2 * TRANSFER_FWD_FEE);

        send_empty_message(0, storage::keeper_address, CARRY_REMAINING_GAS); ;; pay excess keeper to withdrawal
        return (); ;; parse message body on keeper off-chain side, less gas used
    }

    ;; handle keeper message to refuse invalid withdrawal and return excess to user
    if (op == op::refuse_withdrawal) {
        (int jetton_amount, slice user_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        throw_unless(error::not_keeper, equal_slices(sender_address, storage::keeper_address));
        
        send_empty_message(0, user_address, CARRY_REMAINING_GAS); ;; pay excess to user
        return (); 
    }

    ;; handle keeper withdrawal message to send funds to user
    if (op == op::withdraw) {
        (int jetton_amount, slice user_address, int fwd_value) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_coins());
        throw_unless(error::not_keeper, equal_slices(sender_address, storage::keeper_address));
        throw_unless(error:zero_withdrawal, jetton_amount > 0);

        var body = create_simple_transfer_body(query_id, fwd_value, jetton_amount, user_address); ;; transfer to user's jetton wallet
        send_simple_message(0, storage::vault_jetton_wallet, body.end_cell(), CARRY_REMAINING_GAS | IGNORE_ERRORS); 
        return ();
    }

    ;; handle governance message from admin to change vault parameters
    if equal_slices(sender_address, storage::admin_address) {
        handle_admin_messages(op, query_id, my_balance, msg_value, in_msg_body);
        return ();
    }

    throw(error::wrong_op);
}
